# -*- generated by 1.0.9 -*-
import da
PatternExpr_179 = da.pat.TuplePattern([da.pat.ConstantPattern('Ping')])
PatternExpr_184 = da.pat.FreePattern('p')
PatternExpr_203 = da.pat.TuplePattern([da.pat.ConstantPattern('Ping')])
PatternExpr_208 = da.pat.FreePattern('p')
PatternExpr_273 = da.pat.TuplePattern([da.pat.ConstantPattern('Pong')])
PatternExpr_278 = da.pat.FreePattern('rclk')
PatternExpr_302 = da.pat.TuplePattern([da.pat.ConstantPattern('Pong')])
_config_object = {}
import sys

class Pong(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._PongReceivedEvent_0 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_PongReceivedEvent_0', PatternExpr_179, sources=[PatternExpr_184], destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_PongReceivedEvent_1', PatternExpr_203, sources=[PatternExpr_208], destinations=None, timestamps=None, record_history=None, handlers=[self._Pong_handler_202])])

    def setup(self, total_pings, **rest_380):
        super().setup(total_pings=total_pings, **rest_380)
        self._state.total_pings = total_pings
        pass

    def run(self):
        a = False
        super()._label('_st_label_174', block=False)
        _st_label_174 = 0
        while (_st_label_174 == 0):
            _st_label_174 += 1
            if (len([p for (_, (_, _, p), (_ConstantPattern195_,)) in self._PongReceivedEvent_0 if (_ConstantPattern195_ == 'Ping')]) == self._state.total_pings):
                _st_label_174 += 1
            else:
                super()._label('_st_label_174', block=True)
                _st_label_174 -= 1

    def _Pong_handler_202(self, p):
        clk = self.logical_clock()
        clk += 100
        self.output('inside receiver handler of pong, time is ', clk)
        self.output('before send pong at ', clk)
        self.send(('Pong',), to=p)
        self.output('after sent pong at ', clk)
    _Pong_handler_202._labels = None
    _Pong_handler_202._notlabels = None

class Ping(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._PingReceivedEvent_0 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_PingReceivedEvent_0', PatternExpr_273, sources=None, destinations=None, timestamps=[PatternExpr_278], record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_PingReceivedEvent_1', PatternExpr_302, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Ping_handler_301])])

    def setup(self, p, nrounds, **rest_380):
        super().setup(p=p, nrounds=nrounds, **rest_380)
        self._state.p = p
        self._state.nrounds = nrounds
        pass

    def run(self):
        for i in range(self._state.nrounds):
            clk = self.logical_clock()
            self.output(self._id, ' before ping sent at ', clk)
            self.send(('Ping',), to=self._state.p)
            self.output(self._id, ' after ping sent at ', clk)
            super()._label('_st_label_270', block=False)
            rclk = None

            def ExistentialOpExpr_271():
                nonlocal rclk
                for (_, (rclk, _, _), (_ConstantPattern289_,)) in self._PingReceivedEvent_0:
                    if (_ConstantPattern289_ == 'Pong'):
                        if (rclk > clk):
                            return True
                return False
            _st_label_270 = 0
            while (_st_label_270 == 0):
                _st_label_270 += 1
                if ExistentialOpExpr_271():
                    _st_label_270 += 1
                else:
                    super()._label('_st_label_270', block=True)
                    _st_label_270 -= 1
            else:
                if (_st_label_270 != 2):
                    continue
            if (_st_label_270 != 2):
                break
            self.output(self._id, 'after awaiting for pong, time is ', clk)

    def _Ping_handler_301(self):
        clk = self.logical_clock()
        self.output(self._id, 'Ping receives Pong at ', clk)
    _Ping_handler_301._labels = None
    _Ping_handler_301._notlabels = None

class Node_(da.NodeProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([])
    _config_object = {'clock': 'Lamport'}

    def run(self):
        nrounds = (int(sys.argv[1]) if (len(sys.argv) > 1) else 3)
        npings = (int(sys.argv[2]) if (len(sys.argv) > 2) else 1)
        pong = self.new(Pong, [(nrounds * npings)], num=1)
        ping = self.new(Ping, num=npings)
        self._setup(ping, (pong, nrounds))
        self._start(pong)
        self._start(ping)
