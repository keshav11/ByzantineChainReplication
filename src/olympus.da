replica_module = import_da('replica')
import nacl.signing
import nacl.encoding

class Olympus(process):
    def setup(num_replica, clients):
        self.replicas_public_keys = {}
        self.configuration = []  # current configuration

    def generate_keys():
        """TODO: genererate keys"""
        s_key = nacl.signing.SigningKey.generate()
        v_key = s_key.verify_key
        v_key_hex = v_key.encode(encoder=nacl.encoding.HexEncoder)
        return (s_key,v_key_hex)

    def receive(msg= ('get_config', client)):
        send(('config', self.configuration), to=client)

    def run():
        """ creating num_replica replicas """
        start_replicas()
        output("registering to clients...")
        register_to_clients()

    def register_to_clients():
        for client in clients:
            output("sending self to client ", client)
            send(('olympus', self), to=client)
        await(each(client in clients, has=received(('olympus_received', client))))

    def start_replicas():
        """start num_replicas replicas"""
        output("olympus:start_replicas started")
        itr = 0
        for replica in range(num_replica):
            key_pair = generate_keys()
            client_id = 'client'+str(itr)
            itr+=1
            self.replicas_public_keys[client_id] = key_pair[1]
            replica = new(replica_module.Replica, [client_id, key_pair], num=1)
            self.configuration.append(replica)
            start(replica)

        """send public keys to replica"""
        for replica in self.configuration:
            send(('replicas_public_keys', self.replicas_public_keys), to= replica)
            """TODO: remove this"""
            send(('done', ), to=replica)

        """TODO: send public keys to clients"""
        output("olympus:start_replicas finished")


def main():
    olympus = new(Olympus, [ 1, 1 ])
    start(olympus)
