replica_module = import_da('replica')
import nacl.signing
import nacl.encoding

class Olympus(process):
    def setup(num_replica, clients, failure_scenarios, head_timeout, nonhead_timeout):
        self.all_replicas_public_keys = {}
        self.configuration = []  # current configuration
        self.configuration_number = 0

    def generate_keys():
        """TODO: genererate keys"""
        s_key = nacl.signing.SigningKey.generate()
        v_key = s_key.verify_key
        v_key_hex = v_key.encode(encoder=nacl.encoding.HexEncoder)
        return (s_key,v_key_hex)

    def receive(msg= ('get_config', client)):
        send(('config', self.configuration, self.configuration_number), to=client)

    def run():
        """ creating num_replica replicas """
        start_replicas()
        register_to_clients()
        # wait till done not received
        await(received(('done')))
        output('olympus run finished!')

    def register_to_clients():
        for client in clients.values():
            output("sending self to client ", client)
            send(('olympus', self), to=client)
        await(each(client in clients.values(), has=received(('olympus_received', client))))


    def start_replicas():
        """start num_replicas replicas"""
        output("olympus:start_replicas started")
        for itr in range(num_replica):
            key_pair = generate_keys()
            replica_id = 'replica'+str(itr)
            self.all_replicas_public_keys[replica_id] = key_pair[1]
            output('Olympus sending replica id as ', replica_id)
            if itr == 0:
                timeout = self.head_timeout
            else:
                timeout = self.nonhead_timeout
            replica = new(replica_module.Replica, [replica_id, itr, key_pair, clients, failure_scenarios.get(itr), timeout], num=1)
            self.configuration.append(replica)
            start(replica)

        """send public keys and config to replica"""
        for replica in self.configuration:
            send(('inithist', []), to=replica)
            send(('all_replicas_public_keys', self.all_replicas_public_keys), to= replica)
            send(('config', self.configuration, self.configuration_number), to=replica)
            """TODO: remove this"""
            send(('done', ), to=replica)

        """TODO: send public keys to clients"""
        output("olympus:start_replicas finished")


def main():
    olympus = new(Olympus, [ 1, 1 ])
    start(olympus)
