from src.object import Object
import time
import sys
import logging
import nacl.signing
import nacl.encoding
import nacl.hash
import nacl.exceptions
import ast

FETCH_CONFIG_PERIOD = 5


class Client(process):
    def setup(client_id, workload, timeout, test_case):
        self.all_replicas_public_keys = {}
        self.olympus = None
        self.configuration = None
        self.configuration_number = -1
        self.head = None
        self.tail = None
        self.TIMER_DURATION = timeout
        self.crypto_keys = None
        self.state_object = Object()
        self.last_result_calc_at_client = None
        self.test_case = test_case
        self.result_count = 0
        self.result_recd_from_replica = None
        self.olympus_pub_key = None
        self.replica_state_obj = None
        output("client setup completed", level=logging.DEBUG)

    def receive(msg= ('all_crypto_keys', olympus_public_key,
                      client_crypto_keys, all_replicas_public_keys), from_=olympus):
        output('received crypto keys from olympus', level= logging.INFO)
        self.olympus_pub_key = olympus_public_key
        self.olympus = olympus
        self.crypto_keys = client_crypto_keys
        self.all_replicas_public_keys = all_replicas_public_keys

    def receive(msg= ('config', configuration, configuration_number, all_replicas_public_keys)):
        self.configuration = configuration
        self.all_replicas_public_keys = all_replicas_public_keys
        self.configuration_number = configuration_number
        self.head = self.configuration[0]
        self.tail = self.configuration[-1]
        output("received config from olympus ", self.configuration, level=logging.INFO)

    def receive(msg= ('result', result, result_proof, request_id)):
        if not validate(result, result_proof):
            output('result proof validation failed. sending reconfiguration request',
                   level=logging.CRITICAL)
            send(('reconfiguration_request', (result, result_proof), self.client_id), to=self.olympus)
            return
        # matching result from client and result computed at client
        if self.test_case.startswith('verify_result_single_client') \
                or self.test_case.startswith('client_timeout_testcase'):
            if result == self.last_result_calc_at_client:
                self.result_count += 1
                output('result from replica match with result computed at client. result received from replica-',
                       result, 'result computed-', self.last_result_calc_at_client, level= logging.INFO)
            else:
                output('result from replica does not match with result computed at client.'
                       ' result received from replica-', result, 'result computed-',
                        self.last_result_calc_at_client, level= logging.ERROR)

        self.result_recd_from_replica = result
        output('received result for request id', request_id, result, level=logging.INFO)

    def receive(msg= ('state_object', obj)):
        output('received state object-', obj)
        self.replica_state_obj = obj

    def get_decoded_msg(signed_msg):
        return ast.literal_eval(signed_msg.message.decode())

    def receive(msg= ('result_olympus', result, request_id)):
        decoded_message = get_decoded_msg(result)
        output('result received from olympus', decoded_message, level=logging.INFO)
        if not verify(result, type='olympus'):
            output('signature validation failed for result from olympus',
                       level=logging.CRITICAL)

    def send_request(request_id, request, is_retrasmitted, recipient):
        output("sending request with id ", request_id, " and request workload ", request, "to", recipient)
        signed_request = sign((request_id, self.client_id, request, is_retrasmitted))
        send(('request', signed_request), to=recipient)

    def fetch_config():
        self.configuration = None
        send(('get_config'), to=self.olympus)
        await(self.configuration is not None)

    def crypto_hash(data):
        return nacl.hash.sha256(data.encode(), encoder=nacl.encoding.HexEncoder)

    def verify(data, id=None, type="replica"):
        if type == "replica":
            v_key = nacl.signing.VerifyKey(self.all_replicas_public_keys[id],
                                   encoder=nacl.encoding.HexEncoder)
        else:
            v_key = nacl.signing.VerifyKey(self.olympus_pub_key,
                                           encoder=nacl.encoding.HexEncoder)
        try:
            v_key.verify(data)
        except nacl.exceptions.BadSignatureError:
            return False
        except:
            return False
        output('signature verified', level= logging.DEBUG)
        return True

    def sign(data):
        return crypto_keys[0].sign(str(data).encode())

    # validate result returned by the tail replica
    def validate(result, result_proof):
        if len(result_proof) != len(self.configuration):
            output('result proof verification failed due to insufficient'
                   ' number of result statements', level=logging.CRITICAL)
            return False
        output('validating result...')
        result_hash = crypto_hash(result)
        count = 0
        for replica_result_proof in result_proof:
            decoded_message = ast.literal_eval(replica_result_proof.message.decode())
            rplca_id = decoded_message[3]
            if not verify(replica_result_proof, rplca_id) or decoded_message[4] != result_hash:
                if not verify(replica_result_proof, rplca_id):
                    output('signature validation failed for replica id', rplca_id, 'sending reconfiguration request',
                           level=logging.CRITICAL)
                else:
                    output('result hash is different for', rplca_id, 'sending reconfiguration request',
                           level=logging.CRITICAL)
            else:
                count += 1

        # accept the result if t+1 replicas have correctly signed and have same hash
        # also send reconfiguration request to olympus if all 2t+1 are not correct

        t = (len(self.configuration) - 1)/2
        if count != (2*t + 1):
            output('result proofs are not correct for all replicas or some are missing',
                   level=logging.CRITICAL)
            send(('reconfiguration_request', (result, result_proof), self.client_id), to=self.olympus)
        return count >= (t+1)

    def run():
        output("waiting for olympus to contact...", level=logging.INFO)
        await(self.olympus is not None)
        fetch_config()

        workload = list(filter(None, workload.split(';')))
        for i in range(len(workload)):
            # checking periodically if new configuration available
            if i % FETCH_CONFIG_PERIOD == 0:
                fetch_config()
            request = workload[i].strip()
            request_id = client_id + '_' + str(i)
            send_request(request_id, request, 0, self.head)
            self.last_result_calc_at_client = self.state_object.evaluate_request(request)
            output('waiting for result of request id', request_id)
            if await(some(received(('result', _, _, r_id)), has= r_id==request_id) or
                             some(received(('result_olympus', _, r_id)), has= r_id==request_id)):
                output('result received for request_id', request_id)
            elif timeout(self.TIMER_DURATION):
                output('timeout occurred for message request_id', request_id)
                fetch_config()
                for replica in self.configuration:
                    send_request(request_id, request, 1, replica)
                await(some(received(('result', _, _, r_id)), has=r_id == request_id) or
                      some(received(('result_olympus', _, r_id)), has= r_id==request_id))

            if some(received(('result_olympus', _, r_id)), has=r_id == request_id):
                output('result sent for request_id', request_id, 'by olympus', level=logging.INFO)

        testing()
        send(('finished_execution'), to=self.olympus)
        await(received(('done')))
        output('client run finished!')

    def get_state_obj():
        send(('get_state_obj'), to=self.head)
        await(self.replica_state_obj is not None)

    def testing():
        ''' This function verifies the content of dictionary at the end of the test cases '''
        get_state_obj() # get the state object fro the head
        # compare the contents of the dictionary at client and the dictionary
        # sent from replica for every key.
        output('##################################COMPARING DICTIONARY##################################')
        for key in self.state_object.state:
            if key in self.replica_state_obj.state:
                if self.state_object.state[key] == self.replica_state_obj.state[key]:
                    output('object at replica and client match for key-',key, 'value-',
                           self.replica_state_obj.state[key],level= logging.INFO)
                else:
                    output('object at replica and client do not match for key-', key, level= logging.INFO)
            else:
                output('key',key, 'not present at client-', self.client_id, level= logging.INFO)
        output('dictionary state at client', self.state_object.state, level=logging.INFO)
        output('dictionary state at replica', self.replica_state_obj.state, level=logging.INFO)
        if self.replica_state_obj.state == self.state_object.state:
            output('dictionary state at replica is same as dictionary state a client', level=logging.INFO)
        else:
            output('dictionary state at replica is not same as dictionary state a client', level=logging.INFO)
        output('########################################################################################')
        if self.test_case.startswith('verify_result_single_client') \
                or self.test_case.startswith('client_timeout_testcase'):
            output('Number of correct results received at client-', self.result_count)
            if self.test_case.startswith('verify_result_single_client_pseudorandom_testcase'):
                req_count = 250
            else:
                req_count = 4
            if self.result_count == req_count:
                output(self.test_case, ': PASS', level=logging.INFO)
            else:
                output(self.test_case, ': FAIL', level=logging.ERROR)
        elif self.test_case.startswith('verify_result_multi_client'):
            output('test for verify_result_multi_client for', self.client_id , level= logging.INFO)
            if self.client_id == 'client0':
                req = 'get(movie)'
                res_at_client = self.state_object.evaluate_request(req)
                send_request(client_id + '_verify', req, 0, self.head)
                await(some(received(('result', _, _, r_id)), has=r_id == client_id + '_verify'))
                output('res_at_client', res_at_client, 'res_from_replica', self.result_recd_from_replica)
                if res_at_client == self.result_recd_from_replica:
                    output(self.test_case, ': PASS', level=logging.INFO)
                else:
                    output(self.test_case, ': FAIL', level=logging.ERROR)
            elif self.client_id == 'client1':
                req = 'get(jedi)'
                res_at_client = self.state_object.evaluate_request(req)
                send_request(client_id + '_verify', req, 0, self.head)
                await(some(received(('result', _, _, r_id)), has=r_id == client_id + '_verify'))
                output('res_at_client', res_at_client, 'res_from_replica', self.result_recd_from_replica)
                if res_at_client == self.result_recd_from_replica:
                    output(self.test_case, ': PASS', level=logging.INFO)
                else:
                    output(self.test_case, ': FAIL', level=logging.ERROR)

def main():
    pass