# TODO - client par result validation
# TODO - code comments and cleanup and rearrange methods
# TODO - client should continuously send reconfig
# TODO - improve logging

import os
import random
import string
import sys
import logging


config(channel is fifo)
olympus_module = import_da('olympus')
client_module = import_da('client')


def main():
    config_file = 'config2.txt'

    """ reading config from file """
    config = {}
    with open(os.path.join(os.path.abspath(''), 'config', config_file), 'r') as input:
        for line in input:
            if line[0] != '#':
                (key, sep, val) = line.partition('=')
                if len(sep) != 0:
                    val = val.strip()
                    config[key.strip()] = int(val) if str.isdecimal(val) else val

    output('config read from file', config_file, 'is', config, level=logging.INFO)

    """ parsing failure scenarios for each replica and putting in data structure """
    failure_scenarios = {}
    for key in config:
        if key.startswith('failures'):
            conf,replica = key.strip('failures[]').split(',')
            conf,replica = int(conf), int(replica)
            if replica in failure_scenarios.keys():
                failure_scenarios[replica][conf] = config[key]
            else:
                failure_scenarios[replica] = {
                    conf: config[key]
                }
    output('failure scenarios for each replica are', failure_scenarios, level=logging.INFO)

    """ creating clients and giving them their workload """
    clients = {}
    for i in range(config['num_client']):
        client_workload_key = 'workload[' + str(i) + ']'
        workload = config[client_workload_key]
        client_id = 'client' + str(i)
        if workload.startswith('pseudorandom'):
            pseudorandom_args = workload[12:].replace('(', '').replace(')', '').split(',')
            workload = pseudorandom(pseudorandom_args[0],int(pseudorandom_args[1]))
        client = new(client_module.Client, [client_id, workload, int(config['client_timeout'])/1000,
                                            config['test_case_name']], num=1)
        clients[client_id] = client
        start(client)

    """ starting olympus """
    num_replicas = 2*config['t']+1
    olympus = new(olympus_module.Olympus, [num_replicas, clients, failure_scenarios,
                    int(config['head_timeout'])/1000, int(config['nonhead_timeout'])/1000], num=1)
    start(olympus)


# Generates random workload
def pseudorandom(seed, n):
    random.seed(seed)
    pseudorandom_workload = ''
    operations = ['get', 'put', 'slice', 'append']

    for i in range(n):
        curr_operation = operations[random.randint(1, 4)-1]
        if curr_operation == 'get':
            key = ''.join(random.choice(string.ascii_lowercase) for x in range(4))
            curr_operation += '('+key+')'
        elif curr_operation == 'put':
            key = ''.join(random.choice(string.ascii_lowercase) for x in range(4))
            value = ''.join(random.choice(string.ascii_lowercase) for x in range(4))
            curr_operation += '(' +key+ ','+value+ ')'
        elif curr_operation == 'slice':
            key = ''.join(random.choice(string.ascii_lowercase) for x in range(4))
            value = str(random.randint(1, 4)) + ':' + str(random.randint(1, 4))
            curr_operation += '(' + key + ',' + value + ')'
        elif curr_operation == 'append':
            key = ''.join(random.choice(string.ascii_lowercase) for x in range(4))
            value = ''.join(random.choice(string.ascii_lowercase) for x in range(4))
            curr_operation += '(' + key + ',' + value + ')'

        pseudorandom_workload += curr_operation
        if i != n:
            pseudorandom_workload += '; '

    return pseudorandom_workload.strip()

