from src.object import Object
import nacl.signing
import nacl.encoding
import nacl.hash
import nacl.exceptions

class Replica(process):

    def setup(replica_id:str, crypto_keys:tuple):
        output("replica: setup finished")
        self.all_replicas_public_keys = {}
        self.state_object = Object()
        self.history = []
        self.slot = 0

    def sign(data):
        return crypto_keys[0].sign(data.encode())

    def verify(data, replica_id):
        v_key = nacl.signing.VerifyKey(self.all_replicas_public_keys[replica_id],
                                       encoder=nacl.encoding.HexEncoder)
        try:
            v_key.verify(data)
        except nacl.exceptions.BadSignatureError:
            return False

        return True

    def crypto_hash(data):
        return nacl.hash.sha256(data.encode(), encoder=nacl.encoding.HexEncoder)

    def receive(msg= ('all_replicas_public_keys', all_replicas_public_keys)):
        self.all_replicas_public_keys = all_replicas_public_keys
        output("replica: receive all_replicas_public_keys finished")

    def receive(msg=('request', request_id, request, retransmitted)):
        output("received request with id ", request_id)
        slot = slot + 1
        self.state_object.evaluate_request(request)
        output(verify(b'132123132112322', replica_id))  # REMOVE ME VERIFY_EXAMPLE
        output(verify(sign(request), replica_id))  # REMOVE ME VERIFY_EXAMPLE
        output(crypto_hash(request))  # REMOVE ME HASH_EXAMPLE
        send('done', to=self) # REMOVE ME

    def run():
        output("replica: run started")
        await(received(('done')))
        await(received('request',))
        output("replica: run finished")


def main():
    replica = new(Replica, ['adsa', ''], num=1)
    start(replica)
    send(('request', 'id1', 'put(\'fruit\',\'apple\')', 0), to=replica)