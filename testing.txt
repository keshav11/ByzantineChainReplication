python -m da --logfile --logfilename logs\log.txt -F info --message-buffer-size 100000  src\bcr.da config1.txt
a file named testing.txt with an entry for each test case.
each entry should include:
(1) brief description of the scenario (i.e., the client requests, failure scenario, etc.),
(2) the name of the configuration file used to run the test case, [2017-10-16] revised next item]
(3) other information (if any) needed to run the test case, including the commands(s) used to run it (or the name of a shell script containing those commands) and any requirements such as that certain files should contain certain content,
(4) the name of the log file produced by running the test case, [2017-10-14 added next item],
(5) description of the programmatic check of correctness of content of dictionary (if any),
(6) the outcome (pass or fail), with a brief explanation of the problem in case of failure.

Test case 1: verify_result_single_client_1
(1) only one client having workload-
    workload[0] = put('movie','star'); append('movie',' wars'); slice('movie','3:6'); get('movie')
    t = 1
(2) configuration file- config_result_verify_testcase_1.txt
(3) python -m da -n MainNode --logfile --logfilename logs\log_verify_result_single_client_1_mainnode.txt -F info --message-buffer-size 100000  src\bcr.da config_result_verify_testcase_1.txt
    python -m da -n ClientNode --logfile --logfilename logs\log_verify_result_single_client_1_clientnode.txt -F info --message-buffer-size 100000  src\bcr.da config_result_verify_testcase_1.txt
(4) log files-
        logs\log_verify_result_single_client_1_mainnode.txt
        logs\log_verify_result_single_client_1_clientnode.txt
(5) A state object is maintained at client and same operations are performed on it as the operations requested
    from the replica. The result for operation on dictionary at client is compared with result received from replica.
    The count of correct results received is maintained at client and if it is 4 the result is PASS otherwise it is FAIL.
    Also after the test case the state object from the head is requested and its content is compared with the content
    of the object at client.
(6) outcome- PASS

Test case 2: verify_result_single_client_2
(1) only one client having workload-
    workload[0] = put('movie','star'); append('movie',' wars'); slice('movie','3:6'); get('movie')
    t = 2
(2) configuration file- config_result_verify_testcase.txt
(3) python -m da --logfile -n MainNode --logfilename logs\log_verify_result_single_client_2.txt -F info --message-buffer-size 100000  src\bcr.da config_result_verify_testcase_2.txt
    python -m da --logfile -n ClientNode --logfilename logs\log_verify_result_single_client_2.txt -F info --message-buffer-size 100000  src\bcr.da config_result_verify_testcase_2.txt
(4) log file- logs\log_verify_result_single_client_2.txt
(5) A state object is maintained at client and same operations are performed on it as the operations requested
    from the replica. The result for operation on dictionary at client is compared with result received from replica.
    The count of correct results received is maintained at client and if it is 4 the result is PASS otherwise it is FAIL.
    Also after the test case the state object from the head is requested and its content is compared with the content
    of the object at client.
(6) outcome- PASS

Test case 3: client_timeout_testcase_1
(1) only one client having workload-
    workload[0] = put('movie','star'); append('movie',' wars'); slice('movie','3:6'); get('movie')
    client timeout at 0ms. t = 1
(2) configuration file- config_client_timeout_testcase_1.txt
(3) python -m da -n MainNode --logfile --logfilename logs\log_client_timeout_1_mainnode.txt -F info --message-buffer-size 100000  src\bcr.da config_client_timeout_testcase_1.txt
    python -m da -n ClientNode --logfile --logfilename logs\log_client_timeout_1_clientnode.txt -F info --message-buffer-size 100000  src\bcr.da config_client_timeout_testcase_1.txt
(4) log files-
        logs\log_client_timeout_1_mainnode.txt
        logs\log_client_timeout_1_clientnode.txt
(5) A state object is maintained at client and same operations are performed on it as the operations requested
    from the replica. The result for operation on dictionary at client is compared with result received from replica.
    The count of correct results received is maintained at client and if it is 4 the result is PASS otherwise it is FAIL.
    Also after the test case the state object from the head is requested and its content is compared with the content
    of the object at client.
(6) outcome- PASS

Test case 4: client_timeout_testcase_2
(1) only one client having workload
    workload[0] = put('movie','star'); append('movie',' wars'); slice('movie','3:6'); get('movie')
    client timeout at 0ms. t = 2
(2) configuration file- config_client_timeout_testcase_2.txt
(3) python -m da --logfile --logfilename logs\log_client_timeout_2.txt -F info --message-buffer-size 100000  src\bcr.da config_client_timeout_testcase_2.txt
(4) log file- logs\log_client_timeout_2.txt
(5) a dictionary is maintained at client. The result for operation on dictionary at client
    is compared with result received from replica. The count of correct results received is
    maintained at client and if it is 4 the result is PASS otherwise it is FAIL.
(6) outcome- PASS

Test case 5: verify_result_single_client_pseudorandom_testcase_1
(1) only one client having workload = pseudorandom(255,250)
(2) configuration file- config_pseudorandom_result_verify_testcase_1.txt
(3) python -m da -n MainNode --logfile --logfilename logs\log_verify_result_single_client_pseudorandom_testcase_1_mainnode.txt -F info --message-buffer-size 100000  src\bcr.da config_result_verify_pseudorandom_testcase_1.txt
    python -m da -n ClientNode --logfile --logfilename logs\log_verify_result_single_client_pseudorandom_testcase_1_clientnode.txt -F info --message-buffer-size 100000  src\bcr.da config_result_verify_pseudorandom_testcase_1.txt
(4) log files-
        logs\logs\log_verify_result_single_client_pseudorandom_testcase_1_clientnode.txt
        log\log_verify_result_single_client_pseudorandom_testcase_1_mainnode.txt
(5) A state object is maintained at client and same operations are performed on it as the operations requested
    from the replica. The result for operation on dictionary at client is compared with result received from replica.
    The count of correct results received is maintained at client and if it is 250 the result is PASS otherwise it is FAIL.
    Also after the test case the state object from the head is requested and its content is compared with the content
    of the object at client.
(6) outcome- PASS

Test case 6: verify_result_multi_client_1
(1) two clients
    workload[0] = put('movie','star'); append('movie',' wars'); slice('movie','3:6'); get('movie')
    workload[1] = put('jedi,'luke skywalker'); get('jedi')
(2) configuration file- config_multiclient_result_verify_testcase_1.txt
(3) python -m da -n MainNode --logfile --logfilename logs\log_config_multiclient_result_verify_testcase_1_mainnode.txt -F info --message-buffer-size 100000  src\bcr.da config_multiclient_result_verify_testcase_1.txt
    python -m da -n ClientNode --logfile --logfilename logs\log_config_multiclient_result_verify_testcase_1_clientnode.txt -F info --message-buffer-size 100000  src\bcr.da config_multiclient_result_verify_testcase_1.txt
(4) log file-
        logs\log_config_multiclient_result_verify_testcase_1_clientnode.txt
        logs\log_config_multiclient_result_verify_testcase_1_mainnode.txt
(5) A state object is maintained at client and same operations are performed on it as the operations requested
    from the replica. The result for operation on dictionary at client is compared with result received from replica.
    The count of correct results received is maintained at client and if it is 4 the result is PASS otherwise it is FAIL.
    Also after the test case the state object from the head is requested and its content is compared with the content
    of the object at client.
(6) outcome- PASS