# test case name.  can be used to trigger test case specific code in client,
# e.g., to generate special request sequences or validate intermediate or
# final values of object state. [2017-09-12: added this item]
test_case_name = test2

# number of failures to tolerate.  number of replicas is 2t+1.
t = 1
# number of clients
num_client = 1
# client timeout, in milliseconds.  if timer expires, resend request
# to all replicas, as described in section 3.3.
client_timeout = 3000
# timeout, in milliseconds, for head and non-head servers, respectively:
# if timer expires, send reconfiguration request to Olympus, as described
# in section 3.3.
head_timeout = 3000
nonhead_timeout = 3000
# checkpoint interval.  take a checkpoint every checkpt_interval slots.
checkpt_interval = 5

# MAPPING OF PROCESSES TO HOSTS
# to simplify changing the hosts, we first specify a semicolon-separated
# list of hosts, and then use 0-based indices into that list to specify the
# host on which each process runs.
# list of hosts used in this scenario
hosts = localhost; 192.168.0.3; 192.168.0.4
# host on which each client runs.  in this example, client 0 runs
# on host 1, clients 1 and 2 run on host 0.
client_hosts = 1; 0; 0
# host on which each replica runs.  same in all configurations.
replica_hosts = 0; 1; 2

# CLIENT WORKLOAD
workload[0] = pseudorandom(233,5)
workload[1] = put('movie','star'); append('movie',' wars'); get('movie')
#workload[0] = put('jedi,'luke skywalker'); get('jedi')
#workload[0] = put('jedi,'luke skywalker'); slice('jedi','0:4'); get('jedi')

# FAILURE SCENARIO
# failures(c,r) is the failure scenario for replica r in configuration c.
# configurations are numbered starting with 0.  replicas are numbered by
# position in the chain, starting from 0.  replicas without a specified
# failure scenario are failure-free.


failures[0,1] = shuttle(0,1),truncate_history(4)
failures[0,2] = shuttle(0,1),invalid_result_sig()

#failures[0,1] = checkpoint(0),invalid_result_sig();wedge_request(0),truncate_history(4)


# good case client sends reconfig, increase number of client ops from 5 to more
#failures[0,1] = checkpoint(0),change_operation()
#failures[1,1] = new_configuration(0),invalid_result_sig()

#failures[0,1] = checkpoint(0),change_operation();wedge_request(0),invalid_result_sig()

# good case
#failures[0,1] = checkpoint(0),change_operation()
#failures[1,1] = new_configuration(0),invalid_order_sig()


#failures[0,1] = checkpoint(0),change_operation()  # good test case, does reconfig

#failures[0,1] = shuttle(0,2),drop_checkpt_stmts() pending failure

#failures[0,1] = completed_checkpoint(0),drop_checkpt_stmts()

#failures[0,0] = completed_checkpoint(0),increment_slot() test again

#failures[0,1] = checkpoint(0),extra_op()

#failures[0,1] = shuttle(0,2),change_operation()

#failures[0,1] = checkpoint(0),crash()